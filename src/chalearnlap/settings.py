"""
Django settings for chalearnweb project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sentry_sdk

from django.contrib.messages import constants as message_constants
from django.conf import settings
from sentry_sdk.integrations.django import DjangoIntegration

if os.environ.get('SENTRY_DSN', None) is not None:
    sentry_sdk.init(
        dsn=os.environ.get('SENTRY_DSN'),
        release=os.environ.get('SENTRY_RELEASE', '0.0.1'),
        environment=os.environ.get('SENTRY_ENV', 'Production'),
        integrations=[DjangoIntegration()]
    )



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', False) in [True, 'True', 'true', '1', 1]

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
DIRECTORY = getattr(sentry_sdk, 'FILEBROWSER_DIRECTORY', '')

# Application definition
INSTALLED_APPS = [
    'registration', #should be immediately above 'django.contrib.admin'
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'ckeditor',
    'ckeditor_uploader',
    'datetimewidget',
    'watson',
    'jfu',
    'sorl.thumbnail',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chalearnlap.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.media',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'users.context_processors.base_context',
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'chalearnlap.wsgi.application'
ASGI_APPLICATION = 'chalearnlap.asgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DB_NAME = os.environ.get('DB_NAME', 'chalearn')
if os.environ.get('DB_ENGINE', 'mysql') == 'sqlite3':
    DB_NAME = os.path.join(os.path.dirname(os.path.dirname(BASE_DIR)), DB_NAME + '.sqlite3')
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.{}'.format(os.environ.get('DB_ENGINE', 'mysql')),
        'NAME': DB_NAME,
        'USER': os.environ.get('DB_USER', 'chalearn'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'chalearn'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', 3306),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static_cdn")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "media_cdn")
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Override messages to feedback information
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

# Registration settings
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course, use a different value.
REGISTRATION_EMAIL_HTML = False
SITE_ID = 2

# GMAIL SMTP settings
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', None),
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', None),
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', None),
DEFAULT_TO_EMAIL = ''

LOGIN_REDIRECT_URL = '/'

# CKEditor settings

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': '400px',
        'width': 'auto',
    },
}

CKEDITOR_UPLOAD_PATH = "ck_uploads"

# Account Verification (none or optional)
ACCOUNT_EMAIL_VERIFICATION = 'optional'
